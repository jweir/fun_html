# frozen_string_literal: true

module FunHtml
  # HTML attributes autogenerated, do not edit
  module AttributeDefinitions
    sig { params(value: String).void }

    def accept(value); end
    sig { params(value: String).void }

    def accept_charset(value); end
    sig { params(value: String).void }

    def accesskey(value); end
    sig { params(value: String).void }

    def action(value); end
    sig { params(value: String).void }

    def align(value); end
    sig { params(value: String).void }

    def alt(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def async(value = nil); end
    sig { params(value: String).void }

    def autocomplete(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def autofocus(value = nil); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def autoplay(value = nil); end
    sig { params(value: String).void }

    def bgcolor(value); end
    sig { params(value: Numeric).void }
    def border(value); end
    sig { params(value: String).void }

    def charset(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def checked(value = nil); end
    sig { params(value: String).void }

    def klass(value); end
    sig { params(value: Numeric).void }
    def cols(value); end
    sig { params(value: Numeric).void }
    def colspan(value); end
    sig { params(value: String).void }

    def content(value); end
    sig { params(value: String).void }

    def contenteditable(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def controls(value = nil); end
    sig { params(value: String).void }

    def coords(value); end
    sig { params(value: String).void }

    def data(value); end
    sig { params(value: String).void }

    def datetime(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def default(value = nil); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def defer(value = nil); end
    sig { params(value: String).void }

    def dir(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def disabled(value = nil); end
    sig { params(value: T.any(String, T::Boolean)).void }
    def download(value); end
    sig { params(value: String).void }

    def draggable(value); end
    sig { params(value: String).void }

    def enctype(value); end
    sig { params(value: String).void }

    def for(value); end
    sig { params(value: String).void }

    def form(value); end
    sig { params(value: String).void }

    def formaction(value); end
    sig { params(value: String).void }

    def headers(value); end
    sig { params(value: T.any(Numeric, String)).void }
    def height(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def hidden(value = nil); end
    sig { params(value: Numeric).void }
    def high(value); end
    sig { params(value: String).void }

    def href(value); end
    sig { params(value: String).void }

    def hreflang(value); end
    sig { params(value: String).void }

    def id(value); end
    sig { params(value: String).void }

    def integrity(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def ismap(value = nil); end
    sig { params(value: String).void }

    def kind(value); end
    sig { params(value: String).void }

    def label(value); end
    sig { params(value: String).void }

    def lang(value); end
    sig { params(value: String).void }

    def list(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def loop(value = nil); end
    sig { params(value: Numeric).void }
    def low(value); end
    sig { params(value: T.any(Numeric, String)).void }
    def max(value); end
    sig { params(value: Numeric).void }
    def maxlength(value); end
    sig { params(value: String).void }

    def media(value); end
    sig { params(value: String).void }

    def method(value); end
    sig { params(value: T.any(Numeric, String)).void }
    def min(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def multiple(value = nil); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def muted(value = nil); end
    sig { params(value: String).void }

    def name(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def novalidate(value = nil); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def open(value = nil); end
    sig { params(value: Numeric).void }
    def optimum(value); end
    sig { params(value: String).void }

    def pattern(value); end
    sig { params(value: String).void }

    def placeholder(value); end
    sig { params(value: String).void }

    def poster(value); end
    sig { params(value: String).void }

    def preload(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def readonly(value = nil); end
    sig { params(value: String).void }

    def rel(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def required(value = nil); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def reversed(value = nil); end
    sig { params(value: Numeric).void }
    def rows(value); end
    sig { params(value: Numeric).void }
    def rowspan(value); end
    sig { params(value: String).void }

    def sandbox(value); end
    sig { params(value: String).void }

    def scope(value); end
    sig { params(value: T.nilable(T::Boolean)).void }
    def selected(value = nil); end
    sig { params(value: String).void }

    def shape(value); end
    sig { params(value: Numeric).void }
    def size(value); end
    sig { params(value: String).void }

    def sizes(value); end
    sig { params(value: String).void }

    def spellcheck(value); end
    sig { params(value: String).void }

    def src(value); end
    sig { params(value: String).void }

    def srcdoc(value); end
    sig { params(value: String).void }

    def srclang(value); end
    sig { params(value: String).void }

    def srcset(value); end
    sig { params(value: Numeric).void }
    def start(value); end
    sig { params(value: T.any(Numeric, String)).void }
    def step(value); end
    sig { params(value: String).void }

    def style(value); end
    sig { params(value: Numeric).void }
    def tabindex(value); end
    sig { params(value: String).void }

    def target(value); end
    sig { params(value: String).void }

    def title(value); end
    sig { params(value: String).void }

    def translate(value); end
    sig { params(value: String).void }

    def type(value); end
    sig { params(value: String).void }

    def usemap(value); end
    sig { params(value: String).void }

    def value(value); end
    sig { params(value: T.any(Numeric, String)).void }
    def width(value); end
    sig { params(value: String).void }

    def wrap(value); end
  end
end
# typed: true
# frozen_string_literal: true

module FunHtml
  class Template
    include FunHtml::Writer
    include FunHtml::NodeDefinitions::HTMLAllElements
  end

  module Writer
    def include(func); end
    def text(func); end

    sig { params(blk: T.proc.bind(FunHtml::Attribute).void).returns(FunHtml::Attribute) }
    def attr(&blk); end
    def comments(&elements); end

    sig { returns(T.self_type) }
    def doctype; end

    sig { returns(String) }
    def render; end
  end

  class Attribute
    extend T::Sig
    sig { params(attr: FunHtml::Attribute).returns(String) }
    def self.to_html(attr); end

    sig { params(other: FunHtml::Attribute).returns(FunHtml::Attribute) }
    def merge(other); end

    include FunHtml::AttributeDefinitions

    sig { params(buffer: T::Hash[T.untyped, T.untyped], block: T.nilable(T.proc.bind(FunHtml::Attribute).void)).void }
    def initialize(buffer = {}, &block); end
  end
end

module FunHtml
  # HTML nodes autogenerated, do not edit
  module NodeDefinitions
    module HTMLHtmlElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def html(attributes = nil, &elements); end
    end

    module HTMLHeadElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def head(attributes = nil, &elements); end
    end

    module HTMLTitleElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def title(attributes = nil, &elements); end
    end

    module HTMLBaseElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def base(attributes = nil, &elements); end
    end

    module HTMLLinkElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def link(attributes = nil, &elements); end
    end

    module HTMLMetaElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def meta(attributes = nil, &elements); end
    end

    module HTMLStyleElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def style(attributes = nil, &elements); end
    end

    module HTMLBodyElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def body(attributes = nil, &elements); end
    end

    module HTMLElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def article(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def section(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def nav(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def aside(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def hgroup(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def header(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def footer(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def address(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dt(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dd(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def figure(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def figcaption(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def main(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def search(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def em(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def strong(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def small(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def s(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def cite(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dfn(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def abbr(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def ruby(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def rt(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def rp(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def code(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def var(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def samp(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def kbd(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def sub(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def sup(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def i(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def b(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def u(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def mark(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def bdi(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def bdo(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def wbr(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def summary(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def noscript(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def acronym(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def noframes(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def menuitem(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def noembed(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def plaintext(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def rb(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def rtc(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def strike(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def basefont(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def big(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def center(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def nobr(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def tt(attributes = nil, &elements); end
    end

    module HTMLHeadingElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h1(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h2(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h3(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h4(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h5(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def h6(attributes = nil, &elements); end
    end

    module HTMLParagraphElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def p(attributes = nil, &elements); end
    end

    module HTMLHRElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def hr(attributes = nil, &elements); end
    end

    module HTMLPreElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def pre(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def listing(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def xmp(attributes = nil, &elements); end
    end

    module HTMLQuoteElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def blockquote(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def q(attributes = nil, &elements); end
    end

    module HTMLOListElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def ol(attributes = nil, &elements); end
    end

    module HTMLUListElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def ul(attributes = nil, &elements); end
    end

    module HTMLMenuElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def menu(attributes = nil, &elements); end
    end

    module HTMLLIElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def li(attributes = nil, &elements); end
    end

    module HTMLDListElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dl(attributes = nil, &elements); end
    end

    module HTMLDivElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def div(attributes = nil, &elements); end
    end

    module HTMLAnchorElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def a(attributes = nil, &elements); end
    end

    module HTMLDataElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def data(attributes = nil, &elements); end
    end

    module HTMLTimeElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def time(attributes = nil, &elements); end
    end

    module HTMLSpanElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def span(attributes = nil, &elements); end
    end

    module HTMLBRElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def br(attributes = nil, &elements); end
    end

    module HTMLModElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def ins(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def del(attributes = nil, &elements); end
    end

    module HTMLPictureElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def picture(attributes = nil, &elements); end
    end

    module HTMLSourceElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def source(attributes = nil, &elements); end
    end

    module HTMLImageElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def img(attributes = nil, &elements); end
    end

    module HTMLIFrameElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def iframe(attributes = nil, &elements); end
    end

    module HTMLEmbedElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def embed(attributes = nil, &elements); end
    end

    module HTMLObjectElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def object(attributes = nil, &elements); end
    end

    module HTMLVideoElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def video(attributes = nil, &elements); end
    end

    module HTMLAudioElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def audio(attributes = nil, &elements); end
    end

    module HTMLTrackElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def track(attributes = nil, &elements); end
    end

    module HTMLMapElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def map(attributes = nil, &elements); end
    end

    module HTMLAreaElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def area(attributes = nil, &elements); end
    end

    module HTMLTableElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def table(attributes = nil, &elements); end
    end

    module HTMLTableCaptionElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def caption(attributes = nil, &elements); end
    end

    module HTMLTableColElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def colgroup(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def col(attributes = nil, &elements); end
    end

    module HTMLTableSectionElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def tbody(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def thead(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def tfoot(attributes = nil, &elements); end
    end

    module HTMLTableRowElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def tr(attributes = nil, &elements); end
    end

    module HTMLTableCellElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def td(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def th(attributes = nil, &elements); end
    end

    module HTMLFormElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def form(attributes = nil, &elements); end
    end

    module HTMLLabelElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def label(attributes = nil, &elements); end
    end

    module HTMLInputElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def input(attributes = nil, &elements); end
    end

    module HTMLButtonElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def button(attributes = nil, &elements); end
    end

    module HTMLSelectElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def select(attributes = nil, &elements); end
    end

    module HTMLDataListElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def datalist(attributes = nil, &elements); end
    end

    module HTMLOptGroupElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def optgroup(attributes = nil, &elements); end
    end

    module HTMLOptionElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def option(attributes = nil, &elements); end
    end

    module HTMLTextAreaElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def textarea(attributes = nil, &elements); end
    end

    module HTMLOutputElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def output(attributes = nil, &elements); end
    end

    module HTMLProgressElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def progress(attributes = nil, &elements); end
    end

    module HTMLMeterElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def meter(attributes = nil, &elements); end
    end

    module HTMLFieldSetElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def fieldset(attributes = nil, &elements); end
    end

    module HTMLLegendElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def legend(attributes = nil, &elements); end
    end

    module HTMLDetailsElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def details(attributes = nil, &elements); end
    end

    module HTMLDialogElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dialog(attributes = nil, &elements); end
    end

    module HTMLScriptElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def script(attributes = nil, &elements); end
    end

    module HTMLTemplateElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def template(attributes = nil, &elements); end
    end

    module HTMLSlotElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def slot(attributes = nil, &elements); end
    end

    module HTMLCanvasElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def canvas(attributes = nil, &elements); end
    end

    module HTMLUnknownElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def applet(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def bgsound(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def isindex(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def keygen(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def nextid(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def blink(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def multicol(attributes = nil, &elements); end

      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def spacer(attributes = nil, &elements); end
    end

    module HTMLDirectoryElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def dir(attributes = nil, &elements); end
    end

    module HTMLFrameElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def frame(attributes = nil, &elements); end
    end

    module HTMLFrameSetElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def frameset(attributes = nil, &elements); end
    end

    module HTMLParamElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def param(attributes = nil, &elements); end
    end

    module HTMLFontElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def font(attributes = nil, &elements); end
    end

    module HTMLMarqueeElement
      sig do
        params(attributes: T.nilable(FunHtml::Attribute),
               elements: T.nilable(T.proc.bind(FunHtml::Template).void)).returns(T.self_type)
      end
      def marquee(attributes = nil, &elements); end
    end

    module HTMLAllElements
      include HTMLHtmlElement
      include HTMLHeadElement
      include HTMLTitleElement
      include HTMLBaseElement
      include HTMLLinkElement
      include HTMLMetaElement
      include HTMLStyleElement
      include HTMLBodyElement
      include HTMLElement
      include HTMLHeadingElement
      include HTMLParagraphElement
      include HTMLHRElement
      include HTMLPreElement
      include HTMLQuoteElement
      include HTMLOListElement
      include HTMLUListElement
      include HTMLMenuElement
      include HTMLLIElement
      include HTMLDListElement
      include HTMLDivElement
      include HTMLAnchorElement
      include HTMLDataElement
      include HTMLTimeElement
      include HTMLSpanElement
      include HTMLBRElement
      include HTMLModElement
      include HTMLPictureElement
      include HTMLSourceElement
      include HTMLImageElement
      include HTMLIFrameElement
      include HTMLEmbedElement
      include HTMLObjectElement
      include HTMLVideoElement
      include HTMLAudioElement
      include HTMLTrackElement
      include HTMLMapElement
      include HTMLAreaElement
      include HTMLTableElement
      include HTMLTableCaptionElement
      include HTMLTableColElement
      include HTMLTableSectionElement
      include HTMLTableRowElement
      include HTMLTableCellElement
      include HTMLFormElement
      include HTMLLabelElement
      include HTMLInputElement
      include HTMLButtonElement
      include HTMLSelectElement
      include HTMLDataListElement
      include HTMLOptGroupElement
      include HTMLOptionElement
      include HTMLTextAreaElement
      include HTMLOutputElement
      include HTMLProgressElement
      include HTMLMeterElement
      include HTMLFieldSetElement
      include HTMLLegendElement
      include HTMLDetailsElement
      include HTMLDialogElement
      include HTMLScriptElement
      include HTMLTemplateElement
      include HTMLSlotElement
      include HTMLCanvasElement
      include HTMLUnknownElement
      include HTMLDirectoryElement
      include HTMLFrameElement
      include HTMLFrameSetElement
      include HTMLParamElement
      include HTMLFontElement
      include HTMLMarqueeElement
    end
  end
end
