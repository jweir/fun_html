# xtyped: true

require './lib/html'
require 'minitest/autorun'

class HtmlTest < Minitest::Test
  A = Html::Attribute

  class X < Html::Template
    def call(item, content: nil)
      h1(A.new do
           id('big')
           klass('a "b" c')
         end) do
        text(item.name)
        b { text('Hello & good "byte"') }
        insert(content)
      end
    end
  end

  Item = Struct.new(:name)

  def test_html
    assert_equal \
      '<h1 id="big" class="a &quot;b&quot; c">ITEM<b>Hello &amp; good &quot;byte&quot;</b></h1>',
      X.new.call(Item.new('ITEM')).render
  end

  def test_html_with_extension
    assert_equal \
      '<h1 id="big" class="a &quot;b&quot; c">ITEM<b>Hello &amp; good &quot;byte&quot;</b><b>ok</b></h1>',
      X.new.call(Item.new('ITEM'), content: -> { b { text 'ok' } }).render
  end

  def test_text_html_is_escaped
    t = Html::Template.new
    assert_equal '&lt;script&gt;x&lt;/script&gt;', t.text('<script>x</script>')
  end

  # TODO
  # defines all attributes with type
  # join class and style types
  #
  def test_thread_safety
    # Define a block that generates some HTML
    html_block = proc do
      div do
        Thread.new { text 'Hello, World!' }.join
      end
    end

    # This will store the expected HTML output for comparison
    expected_output = '<div>Hello, World!</div>'

    # This will store the outputs generated by each thread
    outputs = []

    # Create a number of threads and generate HTML in each one
    threads = 10.times.map do
      Thread.new do
        template = Html::Template.new
        template.insert(html_block)
        outputs << template.render
      end
    end

    # Wait for all threads to complete
    threads.each(&:join)

    # Check that each output is as expected
    outputs.each do |output|
      assert_equal expected_output, output
    end
  end
end

# style
# property
# attribute
# class
# id
# title
# hidden
# type
# value
# checked
# disabled
# placeholder
# selected
# -- input
# accept
# acceptCharset
# action
# autocomplete
# autofocus
# disabled
# enctype
# list
# maxlength
# minlength
# multiple
# name
# novalidate
# pattern
# readonly
# required
# size
# for
# form
#
#
#
#
#
#
