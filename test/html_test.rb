# xtyped: true

require './lib/html'
require 'minitest/autorun'

class HtmlTest < Minitest::Test
  A = Html::Attribute

  class X < Html::Template
    def call(item, content: nil)
      h1(A.new do
           id('big')
           klass('a "b" c')
         end) do
        text(item.name)
        b { text('Hello & good "byte"') }
        insert(content)
      end
    end
  end

  Item = Struct.new(:name)

  def test_html
    assert_equal \
      '<h1 id="big" class="a &quot;b&quot; c">ITEM<b>Hello &amp; good &quot;byte&quot;</b></h1>',
      X.new.call(Item.new('ITEM')).render
  end

  def test_without_a_block
    assert_equal \
      '<title title="Ok"/>',
      Html::Template.new.title(A.new { title 'Ok' }).render
  end

  def test_html_with_extension
    assert_equal \
      '<h1 id="big" class="a &quot;b&quot; c">ITEM<b>Hello &amp; good &quot;byte&quot;</b><b>ok</b></h1>',
      X.new.call(Item.new('ITEM'), content: -> { b { text 'ok' } }).render
  end

  def test_text_html_is_escaped
    t = Html::Template.new
    assert_equal '&lt;script&gt;x&lt;/script&gt;', t.text('<script>x</script>')
  end

  def test_attribute
    a = Html::Attribute.new do
      klass('ok')
      id('1')
    end

    b = Html::Attribute.new { name('foo') }

    c = a << b

    assert_equal 'class="ok" id="1"', a.to_s.strip
    assert_equal 'name="foo"', b.to_s.strip
    assert_equal 'class="ok" id="1" name="foo"', c.to_s.strip
  end

  require 'debug'
  def test_thread_safety
    100.times do
      thread_safety
    end
  end

  def thread_safety
    # This will store the outputs generated by each thread
    outputs = []

    # Create a number of threads and generate HTML in each one
    threads = 5.times.map do |n|
      Thread.new do
        outputs << Html::Attribute.new do
          sleep 0.01 if [1].include?(n)
          id n.to_s
          klass n.to_s
          rel n.to_s
        end
      end
    end

    # Wait for all threads to complete
    threads.each(&:join)

    expected = <<~STYLE
      id="0" class="0" rel="0"
      id="1" class="1" rel="1"
      id="2" class="2" rel="2"
      id="3" class="3" rel="3"
      id="4" class="4" rel="4"
    STYLE

    assert_equal expected.strip, outputs.map(&:to_s).sort.map(&:strip).join("\n").strip
  end
end

# style
# property
# attribute
# class
# id
# title
# hidden
# type
# value
# checked
# disabled
# placeholder
# selected
# -- input
# accept
# acceptCharset
# action
# autocomplete
# autofocus
# disabled
# enctype
# list
# maxlength
# minlength
# multiple
# name
# novalidate
# pattern
# readonly
# required
# size
# for
# form
#
#
#
#
#
#
