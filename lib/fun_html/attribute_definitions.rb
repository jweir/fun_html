# frozen_string_literal: true

module FunHtml
  # HTML attributes autogenerated, do not edit
  module AttributeDefinitions
    # Specifies file types browser will accept
    def accept(value) = write(' accept="', value)
    # Character encodings used for form submission
    def accept_charset(value) = write(' accept-charset="', value)
    # Keyboard shortcut to access element
    def accesskey(value) = write(' accesskey="', value)
    # URL where form data is submitted
    def action(value) = write(' action="', value)
    # Alignment of content
    def align(value) = write(' align="', value)
    # Alternative text for images
    def alt(value) = write(' alt="', value)
    # Script should execute asynchronously
    def async(state = true) = write_empty(' async', state)
    # Form/input autocompletion
    def autocomplete(value) = write(' autocomplete="', value)
    # Element should be focused on page load
    def autofocus(state = true) = write_empty(' autofocus', state)
    # Media will start playing automatically
    def autoplay(state = true) = write_empty(' autoplay', state)
    # Background color of element
    def bgcolor(value) = write(' bgcolor="', value)
    # Border width in pixels
    def border(value) = write(' border="', value)
    # Character encoding of document
    def charset(value) = write(' charset="', value)
    # Whether checkbox/radio button is selected
    def checked(state = true) = write_empty(' checked', state)
    # CSS class name(s) for styling
    def klass(value) = write(' class="', value)
    # Number of columns in textarea
    def cols(value) = write(' cols="', value)
    # Number of columns a cell spans
    def colspan(value) = write(' colspan="', value)
    # Content for meta tags
    def content(value) = write(' content="', value)
    # Whether content is editable
    def contenteditable(value) = write(' contenteditable="', value)
    # Show media playback controls
    def controls(state = true) = write_empty(' controls', state)
    # Coordinates for image maps
    def coords(value) = write(' coords="', value)
    # Custom data attributes
    def data(value) = write(' data="', value)
    # Date/time of element content
    def datetime(value) = write(' datetime="', value)
    # Default track for media
    def default(state = true) = write_empty(' default', state)
    # Script should execute after parsing
    def defer(state = true) = write_empty(' defer', state)
    # Text direction
    def dir(value) = write(' dir="', value)
    # Element is disabled
    def disabled(state = true) = write_empty(' disabled', state)
    # Resource should be downloaded
    def download(value) = write(' download="', value)
    # Element can be dragged
    def draggable(value) = write(' draggable="', value)
    # Form data encoding for submission
    def enctype(value) = write(' enctype="', value)
    # Associates label with form control
    def for(value) = write(' for="', value)
    # Form the element belongs to
    def form(value) = write(' form="', value)
    # URL for form submission
    def formaction(value) = write(' formaction="', value)
    # Related header cells for data cell
    def headers(value) = write(' headers="', value)
    # Height of element
    def height(value) = write(' height="', value)
    # Element is not displayed
    def hidden(state = true) = write_empty(' hidden', state)
    # Upper range of meter
    def high(value) = write(' high="', value)
    # URL of linked resource
    def href(value) = write(' href="', value)
    # Language of linked resource
    def hreflang(value) = write(' hreflang="', value)
    # Unique identifier for element
    def id(value) = write(' id="', value)
    # Subresource integrity hash
    def integrity(value) = write(' integrity="', value)
    # Image is server-side image map
    def ismap(state = true) = write_empty(' ismap', state)
    # Type of text track
    def kind(value) = write(' kind="', value)
    # Label for form control/option
    def label(value) = write(' label="', value)
    # Language of element content
    def lang(value) = write(' lang="', value)
    # Links input to datalist options
    def list(value) = write(' list="', value)
    # Media will replay when finished
    def loop(state = true) = write_empty(' loop', state)
    # Lower range of meter
    def low(value) = write(' low="', value)
    # Maximum allowed value
    def max(value) = write(' max="', value)
    # Maximum length of input
    def maxlength(value) = write(' maxlength="', value)
    # Media type for resource
    def media(value) = write(' media="', value)
    # HTTP method for form submission
    def method(value) = write(' method="', value)
    # Minimum allowed value
    def min(value) = write(' min="', value)
    # Multiple values can be selected
    def multiple(state = true) = write_empty(' multiple', state)
    # Media is muted by default
    def muted(state = true) = write_empty(' muted', state)
    # Name of form control
    def name(value) = write(' name="', value)
    # Form validation is skipped
    def novalidate(state = true) = write_empty(' novalidate', state)
    # Details element is expanded
    def open(state = true) = write_empty(' open', state)
    # Optimal value for meter
    def optimum(value) = write(' optimum="', value)
    # Regular expression pattern
    def pattern(value) = write(' pattern="', value)
    # Hint text for input field
    def placeholder(value) = write(' placeholder="', value)
    # Preview image for video
    def poster(value) = write(' poster="', value)
    # How media should be loaded
    def preload(value) = write(' preload="', value)
    # Input field cannot be modified
    def readonly(state = true) = write_empty(' readonly', state)
    # Relationship of linked resource
    def rel(value) = write(' rel="', value)
    # Input must be filled out
    def required(state = true) = write_empty(' required', state)
    # List is numbered in reverse
    def reversed(state = true) = write_empty(' reversed', state)
    # Number of rows in textarea
    def rows(value) = write(' rows="', value)
    # Number of rows a cell spans
    def rowspan(value) = write(' rowspan="', value)
    # Security rules for iframe
    def sandbox(value) = write(' sandbox="', value)
    # Cells header element relates to
    def scope(value) = write(' scope="', value)
    # Option is pre-selected
    def selected(state = true) = write_empty(' selected', state)
    # Shape of image map area
    def shape(value) = write(' shape="', value)
    # Size of input/select control
    def size(value) = write(' size="', value)
    # Image sizes for different layouts
    def sizes(value) = write(' sizes="', value)
    # Element should be spellchecked
    def spellcheck(value) = write(' spellcheck="', value)
    # URL of resource
    def src(value) = write(' src="', value)
    # Content for inline frame
    def srcdoc(value) = write(' srcdoc="', value)
    # Language of text track
    def srclang(value) = write(' srclang="', value)
    # Images to use in different situations
    def srcset(value) = write(' srcset="', value)
    # Starting number for ordered list
    def start(value) = write(' start="', value)
    # Increment for numeric input
    def step(value) = write(' step="', value)
    # Inline CSS styles
    def style(value) = write(' style="', value)
    # Position in tab order
    def tabindex(value) = write(' tabindex="', value)
    # Where to open linked document
    def target(value) = write(' target="', value)
    # Advisory information about element
    def title(value) = write(' title="', value)
    # Whether to translate content
    def translate(value) = write(' translate="', value)
    # Type of element or input
    def type(value) = write(' type="', value)
    # Image map to use
    def usemap(value) = write(' usemap="', value)
    # Value of form control
    def value(value) = write(' value="', value)
    # Width of element
    def width(value) = write(' width="', value)
    # How text wraps in textarea
    def wrap(value) = write(' wrap="', value)
  end
end
